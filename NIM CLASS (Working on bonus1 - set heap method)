import java.util.Random;
import java.util.Scanner;

public class Nim {
	private Heap[] heap; //An array of heaps
	private int numHeaps; //Number of heaps
	private Random randomNumbers;
	private int i;
	private Scanner input = new Scanner(System.in);


	public Nim(int howManyHeaps)
	{
		numHeaps = howManyHeaps;
		heap = new Heap[howManyHeaps];
		for(i=0;i<howManyHeaps;i++)
			heap[i] = new Heap (10);
		randomNumbers = new Random ();
	}
/*
	public void setHeaps() // Bonus 1: Set the size of each individual heap
	{
		int setHeapValue;
		for(int i=0; i<numHeaps;i++){
			setHeapValue = next.Int
		}	
	}
*/	
	public boolean playerMove()
	{
		int heapLetterToInt,flag=1;
		String heapLetter;
		System.out.print("\nSelect a heap: ");

		do{
			heapLetter=input.next();
			heapLetterToInt = toInt(heapLetter);
			if(heapLetterToInt>=0 && heapLetterToInt<numHeaps)
				break;
			else{
				System.out.println("Invalid heap letter, select letter from A to "+ toChar(heapLetterToInt-1)); // minus one to compensa
				return false;
			}
		}while(flag!=0);

		if(heap[heapLetterToInt].isEmpty())
		{
			System.out.println("Heap "+heapLetter+" is empty, pick another");
			return false;
		}

		System.out.print("How many do you want to remove? ");
		int number = input.nextInt();

		return heap[heapLetterToInt].remove(number);
	}

	public void gameMove()
	{
		boolean valid;
		do {
			int heapId = randomNumbers.nextInt(numHeaps);

			if(heap[heapId].isEmpty())
			{
				valid=false;
			} else {
				valid=true;
				int size=randomNumbers.nextInt(heap[heapId].getSize())+1;
				heap[heapId].remove(size);
				System.out.println("Computer takes "+size+" from heap "+ toChar(heapId));
			}

		} while(!valid);

	}

	public void printHeaps()
	{
		int j;
		char printHeapLetters='A';
		//System.out.println("\tA\tB\tC");
		for(i=0;i<numHeaps;i++)
			System.out.print("\t"+ printHeapLetters++);

		System.out.println("");
		for(j=0;j<numHeaps;j++)
			heap[j].displaySize();
		System.out.println("");
	}

	public boolean gameDone()
	{
		int isEmptyCounter=0;
		for(i=0;i<numHeaps;i++){
			if(heap[i].isEmpty()==true)
			isEmptyCounter++;
		}
		if(isEmptyCounter==numHeaps)
			return true;
		else
			return false;
	}

	private char toChar(int index)
	{
		return (char)('A'+index);
	}

	private int toInt(String letter)
	{
		return letter.toUpperCase().charAt(0)-'A';
	}


}
